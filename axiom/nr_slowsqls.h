/*
 * Copyright 2020 New Relic Corporation. All rights reserved.
 * SPDX-License-Identifier: Apache-2.0
 */

/*
 * This file contains functions for storage and aggregation of slow SQL
 * statements.
 */
#ifndef NR_SLOWSQLS_HDR
#define NR_SLOWSQLS_HDR

#include <stdint.h>

#include "nr_datastore_instance.h"
#include "util_object.h"
#include "util_time.h"

/* This struct is used for convenience with DQL input queries as well as where
 * a SQL can have the name "sql" or "sql_obfuscated".
 */
typedef struct _nr_slowsqls_labelled_query_t {
  const char* name;
  const char* query;
} nr_slowsqls_labelled_query_t;

/*
 * This is the agent/transaction pool of slow SQLs.
 */
typedef struct _nr_slowsqls_t nr_slowsqls_t;
typedef struct _nr_slowsql_t nr_slowsql_t;

/*
 * Purpose : Create a new data structure to store a transaction's slow SQL
 *           statements.
 *
 * Params  : 1. The maximum number of distinct slow SQLs to store.  After this
 *              limit is reached, the slowest SQLs are saved.
 */
extern nr_slowsqls_t* nr_slowsqls_create(int max_slowsqls);

/*
 * Purpose : Returns the number of saved slow-SQLs.
 */
extern int nr_slowsqls_saved(const nr_slowsqls_t* slowsqls);

/*
 * Purpose : Returns the slow-SQL at the given index.
 */
extern const nr_slowsql_t* nr_slowsqls_at(const nr_slowsqls_t* slowsqls, int i);

/*
 * Purpose : Add a slow SQL to the slow SQL storage structure.  If the SQL
 *           being added is already present then the input will be aggregated
 *           with the existing entry.
 */
typedef struct _nr_slowsqls_params_t {
  /*
   * The SQL itself, which can be obfuscated or raw.  IMPORTANT: this system
   * will not obfuscate or alter the SQL given.  Therefore it is the caller's
   * responsibility to provide the SQL exactly as it should be sent to the
   * collector.
   */
  const char* sql;
  nrtime_t duration;           /* The duration of the SQL call */
  const char* stacktrace_json; /* A backtrace in JSON format */
  /*
   * The name of the specific database metric generated by the SQL call.  eg.
   * "Database/my_table/insert"
   */
  const char* metric_name;
  const char* plan_json;        /* Optional explain plan in JSON format */
  const char* input_query_json; /* Optional query language (such as DQL) was
                                   used to create the SQL */
  nr_datastore_instance_t*
      instance; /* Any instance information that was collected */
  int instance_reporting_enabled;
  int database_name_reporting_enabled;
} nr_slowsqls_params_t;

extern void nr_slowsqls_add(nr_slowsqls_t* slowsqls,
                            const nr_slowsqls_params_t* params);

/*
 * Purpose : Destroy a slow-SQL store and free all of its associated memory.
 */
extern void nr_slowsqls_destroy(nr_slowsqls_t** slowsqls_ptr);

/*
 * Purpose : Acquire the name or data of a slow-SQL.
 */
extern uint32_t nr_slowsql_id(const nr_slowsql_t* slow);
extern int nr_slowsql_count(const nr_slowsql_t* slow);
extern nrtime_t nr_slowsql_min(const nr_slowsql_t* slow);
extern nrtime_t nr_slowsql_max(const nr_slowsql_t* slow);
extern nrtime_t nr_slowsql_total(const nr_slowsql_t* slow);
extern const char* nr_slowsql_metric(const nr_slowsql_t* slow);
extern const char* nr_slowsql_query(const nr_slowsql_t* slow);
extern const char* nr_slowsql_params(const nr_slowsql_t* slow);

#endif /* NR_SLOWSQLS_HDR */
