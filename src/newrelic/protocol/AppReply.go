//
// Copyright 2020 New Relic Corporation. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
//

// automatically generated by the FlatBuffers compiler, do not modify

package protocol

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type AppReply struct {
	_tab flatbuffers.Table
}

func GetRootAsAppReply(buf []byte, offset flatbuffers.UOffsetT) *AppReply {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AppReply{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *AppReply) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AppReply) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *AppReply) Status() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AppReply) MutateStatus(n int8) bool {
	return rcv._tab.MutateInt8Slot(4, n)
}

func (rcv *AppReply) ConnectReply() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AppReply) SecurityPolicies() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AppReply) ConnectTimestamp() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AppReply) MutateConnectTimestamp(n uint64) bool {
	return rcv._tab.MutateUint64Slot(10, n)
}

func (rcv *AppReply) HarvestFrequency() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AppReply) MutateHarvestFrequency(n uint16) bool {
	return rcv._tab.MutateUint16Slot(12, n)
}

func (rcv *AppReply) SamplingTarget() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AppReply) MutateSamplingTarget(n uint16) bool {
	return rcv._tab.MutateUint16Slot(14, n)
}

func AppReplyStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func AppReplyAddStatus(builder *flatbuffers.Builder, status int8) {
	builder.PrependInt8Slot(0, status, 0)
}
func AppReplyAddConnectReply(builder *flatbuffers.Builder, connectReply flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(connectReply), 0)
}
func AppReplyAddSecurityPolicies(builder *flatbuffers.Builder, securityPolicies flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(securityPolicies), 0)
}
func AppReplyAddConnectTimestamp(builder *flatbuffers.Builder, connectTimestamp uint64) {
	builder.PrependUint64Slot(3, connectTimestamp, 0)
}
func AppReplyAddHarvestFrequency(builder *flatbuffers.Builder, harvestFrequency uint16) {
	builder.PrependUint16Slot(4, harvestFrequency, 0)
}
func AppReplyAddSamplingTarget(builder *flatbuffers.Builder, samplingTarget uint16) {
	builder.PrependUint16Slot(5, samplingTarget, 0)
}
func AppReplyEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
